<launch>

<!--=========================================================================-->
<!--  Arguements                                                             -->
<!--=========================================================================-->

  <arg name="marker_size" default="4.35" /> <!-- 4.5, 4.35 > 4.25, 4.225 > 4 -->
  <arg name="max_new_marker_error" default="0.05" />
  <arg name="max_track_error" default="0.05" />
  <arg name="output_tf_frame" default="map" />

  <arg name="flag_image_view_blocks" default="false" />
  <arg name="flag_image_view_blocks_filter" default="false" />
  <arg name="flag_image_view_2d_points" default="true" />

  <arg name="capture_training_data" default="false" />

  <remap from="/tf" to="tf"/>
  <remap from="/tf_static" to="tf_static"/>

<!--=========================================================================-->
<!--  Pipeline                                                               -->
<!--=========================================================================-->

  <node name="block_vision" pkg="iter_vision" type="block_vision.py" output="screen">
    <remap from="camera/image/compressed" to="image_rect_color/compressed"/>
  </node>

  <node if="$(arg flag_image_view_blocks)" name="image_view_block_detect" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="block_vision/image" />
    <param name="autosize" value="true" />
    <param name="~image_transport" value="compressed" />
  </node>

  <node if="$(arg flag_image_view_blocks_filter)" name="image_view_block_filter_detect" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="block_vision/filtered" />
    <param name="autosize" value="true" />
    <param name="~image_transport" value="compressed" />
  </node>

  <node name="camera_transform_publisher" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 1 $(arg output_tf_frame) usb_cam"/>

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="false" output="screen">
    <param name="marker_size"           type="double" value="$(arg marker_size)" />
    <param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
    <param name="max_track_error"       type="double" value="$(arg max_track_error)" />
    <param name="output_frame"          type="string" value="$(arg output_tf_frame)" />

    <remap from="camera_image"  to="usb_cam/image_raw" />
    <remap from="camera_info"   to="usb_cam/camera_info" />
  </node>

  <node if="$(arg flag_image_view_2d_points)" name="plot_2d_points" pkg="iter_vision" type="plot_2d_points.py" output="screen">
    <remap from="image/compressed" to="block_vision/image/compressed" />
  </node>

  <node if="$(arg flag_image_view_2d_points)" name="image_view_2d_points" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="plot_2d_points/image" />
    <param name="autosize" value="true" />
    <param name="~image_transport" value="compressed" />
  </node>

  <node name="block_pose" pkg="iter_vision" type="block_pose.py" output="screen">
      <param name="parent_frame_id" value="usb_cam"/>
      <param name="tag_id_list" value="['0','1','2','3']"/>
      <remap from="usb_cam/camera_info" to="usb_cam/camera_info"/>
  </node>

  <node name="robot_camera_align" pkg="iter_vision" type="robot_camera_align.py">
    <param name="reference_frame" value="$(arg output_tf_frame)"/>
  </node>

  <node if="$(arg capture_training_data)" name="data_sampler" pkg="iter_vision" type="data_sampler.py" output="screen"/>

</launch>
