<launch>

<!--=========================================================================-->
<!--  Arguements                                                             -->
<!--=========================================================================-->

  <arg name="tf_ns" default=""/>
  <arg name="use_tf_bridge" default="false"/>

  <arg name="video_src" default="/dev/video0" />
  <arg name="use_real_cam" default="true" />
  <arg name="static_cam_image" default="1-4.png" />
  <arg name="output_tf_frame" default="map"/>

  <arg name="flag_image_view_initial" default="false" />
  <arg name="flag_image_view_rectified" default="false" />
  <arg name="flag_image_view_blocks" default="false" />
  <arg name="flag_image_view_blocks_filter" default="false" />
  <arg name="flag_image_view_2d_points" default="false" />

  <arg name="capture_training_data" default="false" />

<!--=========================================================================-->
<!--  Camera Setup                                                           -->
<!--=========================================================================-->

  <include file="$(find iter_vision)/launch/camera.launch">
    <arg name="video_src" value="$(arg video_src)" />
    <arg name="use_real_cam" value="$(arg use_real_cam)" />
    <arg name="static_cam_image" value="$(arg static_cam_image)" />
    <arg name="flag_image_view_initial" value="$(arg flag_image_view_initial)" />
    <arg name="flag_image_view_rectified" value="$(arg flag_image_view_rectified)" />
  </include>

<!--=========================================================================-->
<!--  Block Vision System                                                       -->
<!--=========================================================================-->

  <include file="$(find iter_vision)/launch/pipeline.launch">
    <arg name="output_tf_frame" value="$(arg output_tf_frame)" />
    <arg name="flag_image_view_blocks" value="$(arg flag_image_view_blocks)" />
    <arg name="flag_image_view_blocks_filter" value="$(arg flag_image_view_blocks_filter)" />
    <arg name="flag_image_view_2d_points" value="$(arg flag_image_view_2d_points)" />
    <arg name="capture_training_data" value="$(arg capture_training_data)" />
  </include>

  <node if="$(arg use_tf_bridge)" name="tf_bridge" pkg="iter_vision" type="tf_bridge.py">
    <param name="tf_ns" value="$(arg tf_ns)"/>
  </node>

</launch>
