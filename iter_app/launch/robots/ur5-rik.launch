<launch>
  <param name="robot_type" value="ur5" />

  <arg name="simulated" default='true'/>
  <arg name="limited" default='false' />
  <arg name="use_rik_julia" default="false"/>
  <arg name="use_rik_static" default="false"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find robot_descriptions)/urdf/universal_robots/relaxed_ik_ur5_robotiq_85.xacro'" />

  <!-- If simulated, we do not have a robot connected -->
  <group if="$(eval arg('simulated') == true)">
    <param name="robot_connected" value="false" />
  </group>

  <!-- Else, we launch physical robot -->
  <group if="$(eval arg('simulated') == false)">
    <param name="robot_connected" value="true" />

    <!-- Launch robot driver -->
    <include file="$(find robot_bringup)/universal_robots/ur5_bringup.launch">
      <arg name="robot_ip" value="10.130.229.132" />
    </include>

    <!-- Robotiq 85 ROS Driver -->
    <include file="$(find robot_bringup)/robotiq/robotiq_85.launch">
      <arg name="dual_gripper" value="false"/>
      <arg name="comport" value="/dev/ttyUSB0"/>
      <arg name="baud" value="115200"/>
      <arg name="run_test" value="false"/>
    </include>

    <!-- Run gripper command action server, which receives planned motion goal under "gripper_command". After receiving the command from Moveit Rviz Plugin, this node act as an actionlib client and send the goal to the finger position action server from kinova_driver.  -->
    <node name="gripper_action_server" pkg="robotiq_85_driver" type="gripper_action_server.py" output="screen" respawn="false"/>

  </group>

  <!-- Setup robot configuration for Relaxed Ik -->
  <param name="use_rik_static" value="$(arg use_rik_static)"/>
  <param name="path_to_relaxed_ik_src" value="$(find relaxed_ik)/src"/>
  <param name="info_file_name" value="info_ur5.yaml"/>

  <group unless="$(arg use_rik_static)">
    <include file="$(find relaxed_ik)/launch/load_info_file.launch">
      <arg name="info_file_name" value="info_ur5.yaml"/>
    </include>
    <include file="$(find timed_roslaunch)/launch/timed_roslaunch.launch">
      <arg name="time" value="1"/>
      <arg name="pkg" value="relaxed_ik"/>
      <arg if="$(arg use_rik_julia)" name="file" value="relaxed_ik_julia.launch"/>
      <arg unless="$(arg use_rik_julia)" name="file" value="relaxed_ik_python.launch"/>
    </include>

    <node unless="$(arg simulated)" name="ur_servoing" pkg="robot_behavior" type="ur_js_servoing.py">
      <param name="joint_state_topic" value="/real_time/joint_states"/>
      <rosparam param="joint_ordering">['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']</rosparam>
      <param name="servoj_timestep" value="0.5"/>
      <param name="servoj_gain" value="200"/>
    </node>
  </group>

  <!-- Handle Joint-space -->
  <group if="$(eval arg('simulated') == true)">
    <param name="robot_connected" value="false" />

    <node name="virtual_robot_controller" pkg="robot_behavior" type="virtual_robot_controller.py">
      <param name="~gripper_joint" value="robotiq_85_left_knuckle_joint" />
    </node>

    <!-- We do not have a robot connected, so publish fake joint states -->
    <group if="$(arg use_rik_static)">
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/virtual_controller/joint_states]</rosparam>
      </node>
    </group>
    <group unless="$(arg use_rik_static)">
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/virtual_controller/joint_states, /real_time/joint_states]</rosparam>
      </node>
    </group>

  </group>

  <group if="$(eval arg('simulated') == false)">

    <!-- Joint Publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">['/gripper/joint_state','/ur/joint_states']</rosparam>
    </node>

  </group>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- RVIZ -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find iter_app)/rviz/rik-robot-tf.rviz"/>

</launch>
