<launch>
  <arg name="simulated" default='true'/>
  <arg name="use_rik" default='true' />

  <!-- If simulated, we do not have a robot connected -->
  <group if="$(eval arg('simulated') == true)">
    <param name="robot_connected" value="false" />

    <!-- Moveit -->
    <include file="$(find ur5_robotiq85_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>
    <include file="$(find ur5_robotiq85_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="true"/>
      <arg name="info" value="true"/>
    </include>

    <!-- Joint Publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">['/move_group/fake_controller_joint_states']</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen"/>

    <!-- RVIZ-->
    <include file="$(find ur5_robotiq85_moveit_config)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
    </include>

  </group>

  <!-- Else, we launch physical robot -->
  <group if="$(eval arg('simulated') == false)">
    <param name="robot_connected" value="true" />

    <include file="$(find ur5_robotiq85_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- Launch robot driver -->
    <include file="$(find robot_bringup)/universal_robots/ur5_bringup.launch">
      <arg name="robot_ip" value="10.130.229.132" />
    </include>

    <!-- Launch gripper driver -->
    <include file="$(find ur5_robotiq85_moveit_config)/launch/robotiq_85.launch">
      <arg name="dual_gripper" value="false"/>
      <arg name="comport" value="/dev/ttyUSB0"/>
      <arg name="baud" value="115200"/>
      <arg name="run_test" value="false"/>
    </include>

    <!-- Moveit interface -->
    <include file="$(find ur5_robotiq85_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="true"/>
    </include>

    <!-- Run gripper command action server, which receives planned motion goal under "gripper_command". After receiving the command from Moveit Rviz Plugin, this node act as an actionlib client and send the goal to the finger position action server from kinova_driver.  -->
    <node name="gripper_action_server" pkg="robotiq_85_driver" type="gripper_action_server.py" output="screen" respawn="false"/>

    <!-- Joint Publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">['/gripper/joint_states','/ur_joint_states']</rosparam>
    </node>

    <!-- RVIZ-->
    <include file="$(find ur5_robotiq85_moveit_config)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
    </include>

  </group>

</launch>
