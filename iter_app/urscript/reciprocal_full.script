def reciprocal_full():
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.9)
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    enter_critical
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    exit_critical
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sync()
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[socket_id_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[socket_id_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[socket_id_index(gripper_socket)]):
      return 0
    end
  
    enter_critical
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[socket_id_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    exit_critical
    return stopPumpThreadHandles[socket_id_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[socket_id_index(gripper_socket)])):
      sync()
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[socket_id_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[socket_id_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[socket_id_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
          sync()
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
      if(is_vacuum_OBJ_object_detected(gOBJ)):
          rq_obj_detect = 1
          return True
      else:
          rq_obj_detect = 0
          return False
      end
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
    return is_FLT(6, rq_get_var(FLT, 2, gripper_socket))
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  def is_vacuum_OBJ_object_detected(list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '1'?
      if (list_of_bytes[1] == 49):
          return True
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      return False
  
  end
  
  def is_vacuum_OBJ_object_secured(list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      return False
  
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      enter_critical
      rq_send_pos_spd_for(pressure, timeout, minimum, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          rq_send_pos_spd_for(pressure, timeout, minimum, gripper_socket)
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  end
  
  def is_FLT(fault_number, list_of_bytes):
      zero_ascii = 48
      if (list_of_bytes[0] != 2):
          return False
      end
  
      if (list_of_bytes[1] != zero_ascii):
          return False
      end
  
      if (list_of_bytes[2] != zero_ascii + fault_number):
          return False
      end
  
      return True
  end
  
  def is_FLT_vacuum_timeout(list_of_bytes):
    return is_FLT(6, list_of_bytes)
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def socket_id_index(socket_id):
    if (socket_id == "1"):
      return 0
    elif (socket_id == "2"):
      return 1
    elif (socket_id == "3"):
      return 2
    elif (socket_id == "4"):
      return 3
    else:
      return -1
    end
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      rq_wait_for_vacuum_object_not_detected(gripper_socket)
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, wait_for_object_detected, gripper_socket)
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, wait_for_object_detected, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_detected:
      if (advanced_mode and not is_continuous_grip(pressure)):
        rq_wait_for_vacuum_object_secured(gripper_socket)
      else:
        rq_wait_for_vacuum_object_detected(gripper_socket)
      end
    end
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      if (not is_FLT_no_fault(gFLT) or not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var(ACT, 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
  #   Type: Gripper
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  LBP = 12
  LRD = 13
  LBL = 14
  LGN = 15
  MSC = 16
  MOD = 17
  
  gripper_1_connected = False
  gripper_2_connected = False
  gripper_3_connected = False
  gripper_4_connected = False
  
  gripper_1_socket_open = False
  gripper_2_socket_open = False
  gripper_3_socket_open = False
  gripper_4_socket_open = False
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      is_gripper_connected = rq_is_gripper_connected(gripper_sid, gripper_socket)
      if(is_gripper_connected):
          rq_set_gripper_connected(gripper_socket)
      end
  
      return is_gripper_connected
  end
  
  def open_gripper_socket(gripper_socket):
    is_open = socket_open("127.0.0.1",63352, gripper_socket)
    set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def is_gripper_socket_open(gripper_socket):
    if(gripper_socket == "1"):
      return gripper_1_socket_open
    elif(gripper_socket == "2"):
      return gripper_2_socket_open
    elif(gripper_socket == "3"):
      return gripper_3_socket_open
    elif(gripper_socket == "4"):
      return gripper_4_socket_open
    else:
      return False
    end
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
    if(gripper_socket == "1"):
      gripper_1_socket_open = is_open
    elif(gripper_socket == "2"):
      gripper_2_socket_open = is_open
    elif(gripper_socket == "3"):
      gripper_3_socket_open = is_open
    elif(gripper_socket == "4"):
      gripper_4_socket_open = is_open
    else:
    end
  end
  
  def rq_is_gripper_connected(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket, 0.1)
      return is_ack(ack)
  end
  
  def rq_set_gripper_connected(gripper_id="1"):
      if(gripper_id == "1"):
          gripper_1_connected = True
      end
  
      if (gripper_id == "2"):
          gripper_2_connected = True
      end
  
      if (gripper_id == "3"):
          gripper_3_connected = True
      end
  
      if (gripper_id == "4"):
          gripper_4_connected = True
      end
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open("127.0.0.1",63352, gripper_socket)
  
      retryCtr = 1
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and retryCtr < 2000):
          retryCtr = retryCtr + 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      if(is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected):
          return True
      else:
          return False
      end
  end
  
  def rq_is_gripper_in_sid_list(gripper_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      if(sid1 == gripper_sid or sid2 == gripper_sid or sid3 == gripper_sid or sid4 == gripper_sid):
          return True
      else:
          return False
      end
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      sync()
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sync()
      sid_list = socket_read_byte_list(17, gripper_socket)
      sync()
      return sid_list
  end
  
  def rq_activate(gripper_socket="1"):
      rq_gripper_act = 0
  
      if (not rq_is_gripper_activated(gripper_socket)):
         rq_reset(gripper_socket)
  
         while(socket_get_var("ACT",gripper_socket) == 1):
            sleep(0.1)
            rq_reset(gripper_socket)
         end
      end
  
      rq_set_var(ACT,1, gripper_socket)
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      rq_activate(gripper_socket)
      sleep(1.0)
  
      while(not rq_is_gripper_activated(gripper_socket)):
          # wait for activation completed
      end
      sleep(0.5)
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_1_connected):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_2_connected):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_3_connected):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_4_connected):
          rq_reset_and_activate("4", reset)
      end
  
      sleep(0.2)
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          sleep(0.5)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_scan_block():
      gripper_socket = "scn_block_socket"
      socket_open("127.0.0.1", 63352, gripper_socket)
      socket_set_var("SCN_BLOCK", 1, gripper_socket)
      sync()
      ack_test = socket_read_byte_list(3, gripper_socket)
  
      retry_counter = 0
  
      while(not is_ack(ack_test) and retry_counter < 5):
          socket_set_var("SCN_BLOCK", 1, gripper_socket)
          sync()
          ack_test = socket_read_byte_list(3, gripper_socket)
          retry_counter = retry_counter + 1
      end
  
      socket_close("scn_block_socket")
  end
  
  def rq_reset(gripper_socket="1"):
      rq_gripper_act = 0
      rq_obj_detect = 0
      rq_mov_complete = 0
  
      rq_set_var(ACT,0, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var(ARD,0, gripper_socket)
      rq_set_var(ACT,1, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
      sleep(0.1)
      rq_set_var(ATR,1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var(ARD,1, gripper_socket)
      rq_set_var(ACT,1, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
      sleep(0.1)
      rq_set_var(ATR,1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      retryCounter = 1
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and retryCounter <= 20):
          retryCounter = retryCounter + 1
          gFLT = rq_get_var(FLT, 2, gripper_socket)
          sleep(0.1)
      end
  
      retryCounter = 1
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and retryCounter <= 100):
          retryCounter = retryCounter + 1
          gFLT = rq_get_var(FLT, 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var(FOR, force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var(SPE, speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_mov_complete = 0
      rq_obj_detect = 0
  
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var(PRE, 3, gripper_socket)
      pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  
      while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
          gPRE = rq_get_var(PRE, 3, gripper_socket)
          pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
          sync()
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
          rq_go_to(gripper_socket)
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var(POS, pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  # set the position, speed and force
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      enter_critical
      rq_send_pos_spd_for(pos, speed, force, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          rq_send_pos_spd_for(pos, speed, force, gripper_socket)
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
      rq_set_var(MSC, current, gripper_socket)
      sleep(1.5)
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var(MOD, mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      socket_send_string("GET MSC",gripper_socket)
      sync()
      var_value = socket_read_byte_list(3, gripper_socket)
  
      current = rq_list_of_bytes_to_value(var_value)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  # send the position, speed and force
  def rq_send_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      rq_mov_complete = 0
  
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
      sleep(0.01)
  
      if (is_OBJ_gripper_at_position(gOBJ)):
          rq_mov_complete = 1
          return True
      end
  
      if (is_OBJ_object_detected(gOBJ)):
          rq_mov_complete = 1
          return True
      end
  
      return False
  
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var(STA, 1, gripper_socket)
  
      if(is_STA_gripper_activated(gSTA)):
          rq_gripper_act = 1
          return True
      else:
          rq_gripper_act = 0
          return False
      end
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
      if(is_OBJ_object_detected(gOBJ)):
          rq_obj_detect = 1
          return True
      else:
          rq_obj_detect = 0
          return False
      end
  end
  
  def rq_current_pos(gripper_socket="1"):
      enter_critical
      rq_pos = socket_get_var("POS",gripper_socket)
      exit_critical
      sync()
      return rq_pos
  end
  
  def rq_motor_current(gripper_socket="1"):
      enter_critical
      rq_current = socket_get_var("COU",gripper_socket)
      exit_critical
      sync()
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_1_connected):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_2_connected):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_3_connected):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_4_connected):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      socket_send_string("GET NCY",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
  
      if(string_from_server == "0"):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", string_from_server)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      socket_send_string("GET DST",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
  
      if(string_from_server == "0"):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(string_from_server == "1"):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(string_from_server == "2"):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(string_from_server == "3"):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      socket_send_string("GET SNU",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      socket_send_string("GET FWV",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      socket_send_string("GET VER",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_gripper_probleme_connection(gripper_socket="1"):
      socket_send_string("GET PCO",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      if (string_from_server == "0"):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '3'?
      if (list_of_bytes[1] == 51):
          return True
      end
  
      return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      # byte is '1'?
      if (list_of_bytes[1]  == 49):
          return True
      end
  
      return False
  
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '3'?
      if (list_of_bytes[1] == 51):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  
      if (is_OBJ_gripper_at_position(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var(GTO, 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var(GTO ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var(GTO, 1, gripper_socket))):
        sync()
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var(GTO, 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, list_of_bytes):
      zero_ascii = 48
      if (list_of_bytes[0] != 1):
          return False
      end
  
      if (list_of_bytes[1] == zero_ascii + goto_value):
          return True
      else:
          return False
      end
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '0'?
      if (list_of_bytes[2] != 48):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '5'?
      if (list_of_bytes[2] != 53):
          return False
      end
  
      return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '7'?
      if (list_of_bytes[2] != 55):
          return False
      end
  
      return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '1'?
      if (list_of_bytes[2] != 49):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '4'?
      if (list_of_bytes[2] != 52):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '5'?
      if (list_of_bytes[2] != 53):
          return False
      end
  
      return True
  
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
  
      var_name_string = ""
  
      if (var_name == ACT):
          var_name_string = "ACT"
      elif (var_name == GTO):
          var_name_string = "GTO"
      elif (var_name == ATR):
          var_name_string = "ATR"
      elif (var_name == ARD):
          var_name_string = "ARD"
      elif (var_name == FOR):
          var_name_string = "FOR"
      elif (var_name == SPE):
          var_name_string = "SPE"
      elif (var_name == POS):
          var_name_string = "POS"
      elif (var_name == LBP):
          var_name_string = "LBP"
      elif (var_name == LRD):
          var_name_string = "LRD"
      elif (var_name == LBL):
          var_name_string = "LBL"
      elif (var_name == LGN):
          var_name_string = "LGN"
      elif (var_name == MSC):
          var_name_string = "MSC"
      elif (var_name == MOD):
          var_name_string = "MOD"
      end
  
      enter_critical
      socket_set_var(var_name_string, var_value, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          socket_set_var(var_name_string , var_value, gripper_socket)
          sync()
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  end
  
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      enter_critical
  
      if (var_name == FLT):
          socket_send_string("GET FLT", gripper_socket)
      elif (var_name == OBJ):
          socket_send_string("GET OBJ", gripper_socket)
      elif (var_name == STA):
          socket_send_string("GET STA", gripper_socket)
      elif (var_name == PRE):
          socket_send_string("GET PRE", gripper_socket)
      elif (var_name == GTO):
          socket_send_string("GET GTO", gripper_socket)
      else:
      end
  
      var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  
      exit_critical
  
      sync()
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var(LBP,0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
    byte_in_buffer = socket_read_byte_list(1, gripper_socket, read_timeout)
  
    while(byte_in_buffer[0] >= 1):
        byte_in_buffer = socket_read_byte_list(1, gripper_socket, read_timeout)
    end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_obj_detect = 0
  set_tool_voltage(24)
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  rq_wait_for_gripper_connected()
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  connectivity_checked = [-1,-1,-1,-1]
  status_checked = [-1,-1,-1,-1]
  current_speed = [-1,-1,-1,-1]
  current_force = [-1,-1,-1,-1]
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_set_gripper_max_cur(0, "1")
  # end: URCap Installation Node
  global safe_p=p[.121882024329, -.222056850994, .236792830837, 2.214551043693, 2.209007056220, -.038585389641]
  global safe_q=[-0.520663086568014, -1.2550352376750489, -2.153726100921631, -1.296215371494629, 1.5502853393554688, -3.6535099188434046]
  global ra_b1_wp_3_p=p[.164039648459, -.432993488779, .207004990440, 2.231449034023, 2.150916497321, .005888234976]
  global ra_b1_wp_3_q=[-0.9256480375873011, -2.225502153436178, -1.1552491188049316, -1.2890051168254395, 1.5843586921691895, -4.026396576558248]
  global ra_b1_at_2_p=p[.164048859607, -.432987211799, .156003297666, 2.231433145382, 2.150953026843, .005864051261]
  global ra_b1_at_2_q=[-0.9259360472308558, -2.2988602123656214, -1.2789673805236816, -1.09193308771167, 1.5838422775268555, -4.025557343159811]
  global ra_b1_wp_4_p=p[.164039648459, -.432993488779, .207004990440, 2.231449034023, 2.150916497321, .005888234976]
  global ra_b1_wp_4_q=[-0.9256480375873011, -2.225502153436178, -1.1552491188049316, -1.2890051168254395, 1.5843586921691895, -4.026396576558248]
  global h_ra_b1_wp_p=p[-.268550459795, -.148786941977, .236040260465, 2.760787546248, -.130572793472, .074888019674]
  global h_ra_b1_wp_q=[-2.2880485693561, -1.5423076909831543, -2.0756640434265137, -0.8220423024943848, 1.8472142219543457, -3.717999283467428]
  global h_ra_b1_at_p=p[-.272048180350, -.157192759916, .194251215223, 2.792813538297, -.086015113110, .106836036043]
  global h_ra_b1_at_q=[-2.278529469166891, -1.6805230579771937, -2.139523983001709, -0.6609977048686524, 1.846601963043213, -3.7465274969684046]
  global ra_b2_wp_3_p=p[.087515287037, -.221248832419, .206702005146, 2.168734795989, 2.262312593554, -.012343653508]
  global ra_b2_wp_3_q=[-0.6148713270770472, -1.2218025487712403, -2.323291301727295, -1.159853295688965, 1.5685076713562012, -3.791356865559713]
  global ra_b2_at_2_p=p[.087508129897, -.221257978462, .153772190447, 2.168626015969, 2.262322833984, -.012400106209]
  global ra_b2_at_2_q=[-0.6154950300799769, -1.4003828328898926, -2.505998134613037, -0.7985204023173829, 1.5665278434753418, -3.7899654547320765]
  global ra_b2_wp_4_p=p[.087515287037, -.221248832419, .206702005146, 2.168734795989, 2.262312593554, -.012343653508]
  global ra_b2_wp_4_q=[-0.6148713270770472, -1.2218025487712403, -2.323291301727295, -1.159853295688965, 1.5685076713562012, -3.791356865559713]
  global h_ra_b2_wp_p=p[-.222173241589, -.148777754495, .236048414321, 2.761692745325, -.071670368621, .001085692355]
  global h_ra_b2_wp_q=[-2.118251148854391, -1.3295157712749024, -2.278651714324951, -0.7692354482463379, 1.7606511116027832, -3.5962026754962366]
  global h_ra_b2_at_p=p[-.214313904583, -.168312439069, .197792616782, 2.872144793180, -.055892150355, -.060704331291]
  global h_ra_b2_at_q=[-2.0081942717181605, -1.4369047445109864, -2.360541820526123, -0.6504801076701661, 1.6435837745666504, -3.520970169697897]
  global home_p=p[-.122149880499, -.119319658552, .414454461367, 2.256333922147, 2.145949286359, -.048097257405]
  global home_q=[-1.4954140822040003, -0.9909351629069825, -1.3928093910217285, -2.2868172130980433, 1.5698156356811523, -4.587305847798483]
  global m2_b1_wp_3_p=p[-.042704697245, -.429628313582, .201673815245, 2.215434322258, 2.177708834449, .017261542855]
  global m2_b1_wp_3_q=[-1.3706086317645472, -2.1039773426451625, -1.3764023780822754, -1.207463101749756, 1.6038203239440918, -4.489721123372213]
  global m2_b1_at_2_p=p[-.042720416710, -.429623434392, .154534319603, 2.215484584853, 2.177650672515, .017305669853]
  global m2_b1_at_2_q=[-1.370920483266012, -2.1853987179198207, -1.4829306602478027, -1.0195043844035645, 1.6032204627990723, -4.488953415547506]
  global m2_b1_wp_4_p=p[-.042704697245, -.429628313582, .201673815245, 2.215434322258, 2.177708834449, .017261542855]
  global m2_b1_wp_4_q=[-1.3706086317645472, -2.1039773426451625, -1.3764023780822754, -1.207463101749756, 1.6038203239440918, -4.489721123372213]
  global h_m2_b1_wp_p=p[-.222193027917, -.245340357359, .232402812178, -3.131447297729, .020473792611, .012287957223]
  global h_m2_b1_wp_q=[-1.9012969175921839, -1.6449223957457484, -1.8348679542541504, -1.2385848325541993, 1.5657720565795898, -3.452902619038717]
  global h_m2_b1_at_p=p[-.222193529315, -.245343394450, .182320086113, -3.131427513479, .020480037603, .012240299437]
  global h_m2_b1_at_q=[-1.9017170111285608, -1.74133362392568, -1.9860405921936035, -0.9910410207561036, 1.564836025238037, -3.451845947896139]
  global safe_end_p=p[.121882024329, -.222056850994, .236792830837, 2.214551043693, 2.209007056220, -.038585389641]
  global safe_end_q=[-0.520663086568014, -1.2550352376750489, -2.153726100921631, -1.296215371494629, 1.5502853393554688, -3.6535099188434046]
  global b_b1_wp_3_p=p[-.030304807371, -.283937777017, .204008258687, -2.216528425233, -2.216551446447, .030244674010]
  global b_b1_wp_3_q=[-1.1993840376483362, -1.4851063054851075, -2.1429600715637207, -1.081810788517334, 1.556018352508545, -4.333504501973287]
  global b_b1_at_2_p=p[-.030308455309, -.283928894351, .154464008312, -2.216488544816, -2.216552879866, .030213614122]
  global b_b1_at_2_q=[-1.1997674147235315, -1.6339341602721156, -2.284506320953369, -0.7914961141398926, 1.5544352531433105, -4.332402054463522]
  global b_b1_wp_4_p=p[-.030304807371, -.283937777017, .204008258687, -2.216528425233, -2.216551446447, .030244674010]
  global b_b1_wp_4_q=[-1.1993840376483362, -1.4851063054851075, -2.1429600715637207, -1.081810788517334, 1.556018352508545, -4.333504501973287]
  global h_b_b1_wp_p=p[-.222187307035, -.245349485613, .187059715045, -3.131459446128, .020432722360, .012267920955]
  global h_b_b1_wp_q=[-1.9016569296466272, -1.7299062214293421, -1.9736275672912598, -1.0148447316936036, 1.564943790435791, -3.4519432226764124]
  global h_b_b1_at_p=p[-.222188488918, -.245348180084, .153240305572, -3.131428254672, .020449419638, .012242483772]
  global h_b_b1_at_q=[-1.9018610159503382, -1.8219691715636195, -2.0532546043395996, -0.8431986135295411, 1.5640320777893066, -3.451306168233053]
  global b_b2_wp_3_p=p[-.035668211110, -.360301863622, .211087613033, -2.218354104897, -2.207103132652, -.014575077894]
  global b_b2_wp_3_q=[-1.3039105574237269, -1.8124195537962855, -1.738701343536377, -1.175420121555664, 1.5779390335083008, -4.434298340474264]
  global b_b2_at_2_p=p[-.035691235608, -.360299967748, .154950784818, -2.218333059790, -2.207085737501, -.014501204171]
  global b_b2_at_2_q=[-1.3043177763568323, -1.9333139858641566, -1.876894474029541, -0.9163335126689454, 1.5767631530761719, -4.433317009602682]
  global b_b2_wp_4_p=p[-.035668211110, -.360301863622, .211087613033, -2.218354104897, -2.207103132652, -.014575077894]
  global b_b2_wp_4_q=[-1.3039105574237269, -1.8124195537962855, -1.738701343536377, -1.175420121555664, 1.5779390335083008, -4.434298340474264]
  global h_b_b2_wp_p=p[-.262195804855, -.254725578067, .211351243168, -3.060477105656, .044312272061, -.022340398503]
  global h_b_b2_wp_q=[-2.0027530829059046, -1.8388554058470667, -1.6762499809265137, -1.2759860318950196, 1.556821346282959, -3.5383766333209437]
  global h_b_b2_at_p=p[-.262207703359, -.254717934216, .155330235821, -3.060501901033, .044322585521, -.022341385246]
  global h_b_b2_at_q=[-2.0031846205340784, -1.950160642663473, -1.8185009956359863, -1.0224278730205079, 1.5558862686157227, -3.5373314062701624]
  global ra_b1_wp_1_p=p[.169973146499, -.296809326276, .195434402710, 2.232445068017, 2.189242430585, .038950188546]
  global ra_b1_wp_1_q=[-0.6690910498248499, -1.7572981319823207, -1.9059481620788574, -1.0302503866008301, 1.5983853340148926, -3.7836998144732874]
  global ra_b1_at_1_p=p[.169979525835, -.296801337671, .153211312514, 2.232415664056, 2.189287675175, .039064188736]
  global ra_b1_at_1_q=[-0.669318977986471, -1.8660270176329554, -2.0047078132629395, -0.8227499288371583, 1.5973773002624512, -3.7829673925982874]
  global ra_b1_wp_2_p=p[.169973146499, -.296809326276, .195434402710, 2.232445068017, 2.189242430585, .038950188546]
  global ra_b1_wp_2_q=[-0.6690910498248499, -1.7572981319823207, -1.9059481620788574, -1.0302503866008301, 1.5983853340148926, -3.7836998144732874]
  global ra_b2_wp_1_p=p[.177574654013, -.370129755590, .209995756714, -2.247693102222, -2.162004200557, .003168947955]
  global ra_b2_wp_1_q=[-0.8011992613421839, -2.0128303966917933, -1.4581351280212402, -1.2632067960551758, 1.5737757682800293, -3.8989723364459437]
  global ra_b2_at_1_p=p[.177559365080, -.370142950076, .156359758601, -2.247789542786, -2.161913170740, .003144993337]
  global ra_b2_at_1_q=[-0.8015940825091761, -2.1062680683531703, -1.5875859260559082, -1.040314034824707, 1.5730557441711426, -3.898012940083639]
  global ra_b2_wp_2_p=p[.177574654013, -.370129755590, .209995756714, -2.247693102222, -2.162004200557, .003168947955]
  global ra_b2_wp_2_q=[-0.8011992613421839, -2.0128303966917933, -1.4581351280212402, -1.2632067960551758, 1.5737757682800293, -3.8989723364459437]
  global m2_b1_wp_1_p=p[-.030704290267, -.217421861057, .203363367824, -2.239709307061, -2.192232836709, .000292473063]
  global m2_b1_wp_1_q=[-1.0793975035296839, -1.1155556005290528, -2.389589786529541, -1.2133425039104004, 1.5756711959838867, -4.192463699971334]
  global m2_b1_at_1_p=p[-.030715869065, -.217426728628, .151677269830, -2.239718479887, -2.192186777871, .000345007255]
  global m2_b1_at_1_q=[-1.0801404158221644, -1.2952125829509278, -2.5811877250671387, -0.8421076101115723, 1.5737395286560059, -4.1909149328814905]
  global m2_b1_wp_2_p=p[-.030704290267, -.217421861057, .203363367824, -2.239709307061, -2.192232836709, .000292473063]
  global m2_b1_wp_2_q=[-1.0793975035296839, -1.1155556005290528, -2.389589786529541, -1.2133425039104004, 1.5756711959838867, -4.192463699971334]
  global b_b1_wp_1_p=p[.287855899839, -.360368482955, .205357838840, 2.240705877807, 2.178573913004, -.080313350076]
  global b_b1_wp_1_q=[-0.5996587912188929, -2.2226387463011683, -1.1531128883361816, -1.3308733266643067, 1.52213716506958, -3.70961839357485]
  global b_b1_at_1_p=p[.287864302426, -.360356650836, .155442903740, 2.240657665725, 2.178644849658, -.080212027880]
  global b_b1_at_1_q=[-0.5999591986285608, -2.2931095562376917, -1.2763543128967285, -1.1372040075114747, 1.5217533111572266, -3.708813492451803]
  global b_b1_wp_2_p=p[.287855899839, -.360368482955, .205357838840, 2.240705877807, 2.178573913004, -.080313350076]
  global b_b1_wp_2_q=[-0.5996587912188929, -2.2226387463011683, -1.1531128883361816, -1.3308733266643067, 1.52213716506958, -3.70961839357485]
  global b_b2_wp_1_p=p[.287521116511, -.433433330874, .210514283630, 2.219518156688, 2.210971428567, -.063003758247]
  global b_b2_wp_1_q=[-0.7232602278338831, -2.5663029156126917, -0.4960026741027832, -1.6434465847411097, 1.534874439239502, -3.8609684149371546]
  global b_b2_at_1_p=p[.287517697169, -.433440308135, .158432174432, 2.219618722216, 2.210964752868, -.063003833913]
  global b_b2_at_1_q=[-0.7238109747516077, -2.5791927776732386, -0.7158632278442383, -1.4108084005168458, 1.534909725189209, -3.8597686926471155]
  global b_b2_wp_2_p=p[.287521116511, -.433433330874, .210514283630, 2.219518156688, 2.210971428567, -.063003758247]
  global b_b2_wp_2_q=[-0.7232602278338831, -2.5663029156126917, -0.4960026741027832, -1.6434465847411097, 1.534874439239502, -3.8609684149371546]
  global ra_b1_wp_p=p[.178146714524, -.161416304550, .213493404111, 2.210681446654, 2.186396811438, -.012933336960]
  global ra_b1_wp_q=[-0.15586787859071904, -1.213484601383545, -2.3001980781555176, -1.1766904157451172, 1.5515928268432617, -3.2794531027423304]
  global ra_b1_at_p=p[.178139960399, -.161424795664, .152149806106, 2.210774950915, 2.186309515602, -.012962531670]
  global ra_b1_at_q=[-0.15657312074770147, -1.417342023258545, -2.512357234954834, -0.7607363027385254, 1.5493497848510742, -3.2777231375323694]
  global ra_b2_wp_p=p[.178586846646, -.221707470079, .209682481771, 2.209269107249, 2.187186882847, -.061103843028]
  global ra_b2_wp_q=[-0.4031255880938929, -1.4598973554423829, -2.1416068077087402, -1.0951555532268067, 1.527942180633545, -3.527621094380514]
  global ra_b2_at_p=p[.178563275813, -.221704853605, .154679177294, 2.209354946320, 2.187205153100, -.061157883392]
  global ra_b2_at_q=[-0.40358001390566045, -1.6239305935301722, -2.3020339012145996, -0.7708419126323243, 1.5261669158935547, -3.5263612906085413]
  global m2_b1_wp_p=p[.284160354717, -.295685205615, .203947064163, 2.247625355386, 2.138129039019, -.026920635873]
  global m2_b1_wp_q=[-0.47641021410097295, -2.0040461025633753, -1.5251784324645996, -1.1507576268962403, 1.54612398147583, -3.562928024922506]
  global m2_b1_at_p=p[.284146168774, -.295689570567, .153107592741, 2.247687816895, 2.138133138047, -.026935157173]
  global m2_b1_at_q=[-0.4767215887652796, -2.102262159387106, -1.638598918914795, -0.9391945165446778, 1.5452961921691895, -3.5621116797076624]
  global b_b1_wp_p=p[.297989012234, -.163873858122, .198695040819, 2.241623967272, 2.193270351811, -.087482334479]
  global b_b1_wp_q=[-0.09873420396913701, -1.7414051494994105, -1.8854727745056152, -1.1173036855510254, 1.5304722785949707, -3.211065117512838]
  global b_b1_at_p=p[.297979779238, -.163889619428, .152630013422, 2.241771357284, 2.193156034424, -.087419348680]
  global b_b1_at_q=[-0.09909373918642217, -1.854900976220602, -1.9979262351989746, -0.8913882535747071, 1.5294289588928223, -3.210127655659811]
  global b_b2_wp_p=p[.293357117368, -.228364459087, .200347823915, 2.251595997639, 2.175659725551, -.047278792892]
  global b_b2_wp_q=[-0.2970622221576136, -1.863840242425436, -1.729811191558838, -1.1234968465617676, 1.544252872467041, -3.3979604879962366]
  global b_b2_at_p=p[.293370637994, -.228345522325, .151162983296, 2.251584757582, 2.175726185718, -.047257885389]
  global b_b2_at_q=[-0.2972906271563929, -1.973480840722555, -1.8424029350280762, -0.9013207715800782, 1.543281078338623, -3.3970850149737757]
  def reciprocal_p3_3():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(ra_b1_wp_3_p, qnear=ra_b1_wp_3_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b1_at_2_p, qnear=ra_b1_at_2_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b1_wp_4_p, qnear=ra_b1_wp_4_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b1_at_p, qnear=h_ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.045)
    movej(get_inverse_kin(ra_b2_wp_3_p, qnear=ra_b2_wp_3_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b2_at_2_p, qnear=ra_b2_at_2_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b2_wp_4_p, qnear=ra_b2_wp_4_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.04)
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b2_at_p, qnear=h_ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(home_p, qnear=home_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p3_2():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(m2_b1_wp_3_p, qnear=m2_b1_wp_3_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(m2_b1_at_2_p, qnear=m2_b1_at_2_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(m2_b1_wp_4_p, qnear=m2_b1_wp_4_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_m2_b1_at_p, qnear=h_m2_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p3_1():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b1_wp_3_p, qnear=b_b1_wp_3_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b1_at_2_p, qnear=b_b1_at_2_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b1_wp_4_p, qnear=b_b1_wp_4_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b1_at_p, qnear=h_b_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b2_wp_3_p, qnear=b_b2_wp_3_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b2_at_2_p, qnear=b_b2_at_2_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b2_wp_4_p, qnear=b_b2_wp_4_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b2_at_p, qnear=h_b_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p2_3():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(ra_b1_wp_1_p, qnear=ra_b1_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b1_at_1_p, qnear=ra_b1_at_1_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b1_wp_2_p, qnear=ra_b1_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b1_at_p, qnear=h_ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(ra_b2_wp_1_p, qnear=ra_b2_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b2_at_1_p, qnear=ra_b2_at_1_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b2_wp_2_p, qnear=ra_b2_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b2_at_p, qnear=h_ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p2_2():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(m2_b1_wp_1_p, qnear=m2_b1_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(m2_b1_at_1_p, qnear=m2_b1_at_1_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(m2_b1_wp_2_p, qnear=m2_b1_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_m2_b1_at_p, qnear=h_m2_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p2_1():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(b_b1_wp_1_p, qnear=b_b1_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b1_at_1_p, qnear=b_b1_at_1_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b1_wp_2_p, qnear=b_b1_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b1_at_p, qnear=h_b_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(b_b2_wp_1_p, qnear=b_b2_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b2_at_1_p, qnear=b_b2_at_1_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b2_wp_2_p, qnear=b_b2_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b2_at_p, qnear=h_b_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p1_3():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(ra_b1_wp_p, qnear=ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b1_at_p, qnear=ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b1_wp_p, qnear=ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b1_at_p, qnear=h_ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.06)
    movej(get_inverse_kin(ra_b2_wp_p, qnear=ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b2_at_p, qnear=ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b2_wp_p, qnear=ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.06)
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b2_at_p, qnear=h_ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p1_2():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(m2_b1_wp_p, qnear=m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(m2_b1_at_p, qnear=m2_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(m2_b1_wp_p, qnear=m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_m2_b1_at_p, qnear=h_m2_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_m2_b1_wp_p, qnear=h_m2_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def reciprocal_p1_1():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(home_p, qnear=home_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(b_b1_wp_p, qnear=b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b1_at_p, qnear=b_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b1_wp_p, qnear=b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b1_at_p, qnear=h_b_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b1_wp_p, qnear=h_b_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(b_b2_wp_p, qnear=b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_b2_at_p, qnear=b_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(b_b2_wp_p, qnear=b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_p, qnear=safe_q), a=1.3962634015954636, v=1.0471975511965976, r=0.075)
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_b_b2_at_p, qnear=h_b_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_b_b2_wp_p, qnear=h_b_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(safe_end_p, qnear=safe_end_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 1 "Robot Program"
  $ 2 "Call reciprocal_p1_1"
  reciprocal_p1_1()
  $ 3 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 4 "Call reciprocal_p1_2"
  reciprocal_p1_2()
  $ 5 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 6 "Call reciprocal_p1_3"
  reciprocal_p1_3()
  $ 7 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 8 "Call reciprocal_p2_1"
  reciprocal_p2_1()
  $ 9 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 10 "Call reciprocal_p2_2"
  reciprocal_p2_2()
  $ 11 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 12 "Call reciprocal_p2_3"
  reciprocal_p2_3()
  $ 13 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 14 "Call reciprocal_p3_1"
  reciprocal_p3_1()
  $ 15 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 16 "Call reciprocal_p3_2"
  reciprocal_p3_2()
  $ 17 "Popup"
  popup("interaction", "Message", False, False, blocking=True)
  $ 18 "Call reciprocal_p3_3"
  reciprocal_p3_3()
end
