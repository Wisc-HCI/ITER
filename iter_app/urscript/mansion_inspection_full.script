def mansion_inspection_full():
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.9)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    enter_critical
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    exit_critical
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sync()
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[socket_id_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[socket_id_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[socket_id_index(gripper_socket)]):
      return 0
    end
  
    enter_critical
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[socket_id_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    exit_critical
    return stopPumpThreadHandles[socket_id_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[socket_id_index(gripper_socket)])):
      sync()
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[socket_id_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[socket_id_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[socket_id_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
          sync()
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
      if(is_vacuum_OBJ_object_detected(gOBJ)):
          rq_obj_detect = 1
          return True
      else:
          rq_obj_detect = 0
          return False
      end
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
    return is_FLT(6, rq_get_var(FLT, 2, gripper_socket))
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  def is_vacuum_OBJ_object_detected(list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '1'?
      if (list_of_bytes[1] == 49):
          return True
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      return False
  
  end
  
  def is_vacuum_OBJ_object_secured(list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      return False
  
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      enter_critical
      rq_send_pos_spd_for(pressure, timeout, minimum, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          rq_send_pos_spd_for(pressure, timeout, minimum, gripper_socket)
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  end
  
  def is_FLT(fault_number, list_of_bytes):
      zero_ascii = 48
      if (list_of_bytes[0] != 2):
          return False
      end
  
      if (list_of_bytes[1] != zero_ascii):
          return False
      end
  
      if (list_of_bytes[2] != zero_ascii + fault_number):
          return False
      end
  
      return True
  end
  
  def is_FLT_vacuum_timeout(list_of_bytes):
    return is_FLT(6, list_of_bytes)
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def socket_id_index(socket_id):
    if (socket_id == "1"):
      return 0
    elif (socket_id == "2"):
      return 1
    elif (socket_id == "3"):
      return 2
    elif (socket_id == "4"):
      return 3
    else:
      return -1
    end
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      rq_wait_for_vacuum_object_not_detected(gripper_socket)
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, wait_for_object_detected, gripper_socket)
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, wait_for_object_detected, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
  
    if advanced_mode:
      rq_set_gripper_mode(1, gripper_socket)
    else:
      rq_set_gripper_mode(0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_detected:
      if (advanced_mode and not is_continuous_grip(pressure)):
        rq_wait_for_vacuum_object_secured(gripper_socket)
      else:
        rq_wait_for_vacuum_object_detected(gripper_socket)
      end
    end
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      if (not is_FLT_no_fault(gFLT) or not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var(ACT, 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
  #   Type: Gripper
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  LBP = 12
  LRD = 13
  LBL = 14
  LGN = 15
  MSC = 16
  MOD = 17
  
  gripper_1_connected = False
  gripper_2_connected = False
  gripper_3_connected = False
  gripper_4_connected = False
  
  gripper_1_socket_open = False
  gripper_2_socket_open = False
  gripper_3_socket_open = False
  gripper_4_socket_open = False
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      is_gripper_connected = rq_is_gripper_connected(gripper_sid, gripper_socket)
      if(is_gripper_connected):
          rq_set_gripper_connected(gripper_socket)
      end
  
      return is_gripper_connected
  end
  
  def open_gripper_socket(gripper_socket):
    is_open = socket_open("127.0.0.1",63352, gripper_socket)
    set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def is_gripper_socket_open(gripper_socket):
    if(gripper_socket == "1"):
      return gripper_1_socket_open
    elif(gripper_socket == "2"):
      return gripper_2_socket_open
    elif(gripper_socket == "3"):
      return gripper_3_socket_open
    elif(gripper_socket == "4"):
      return gripper_4_socket_open
    else:
      return False
    end
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
    if(gripper_socket == "1"):
      gripper_1_socket_open = is_open
    elif(gripper_socket == "2"):
      gripper_2_socket_open = is_open
    elif(gripper_socket == "3"):
      gripper_3_socket_open = is_open
    elif(gripper_socket == "4"):
      gripper_4_socket_open = is_open
    else:
    end
  end
  
  def rq_is_gripper_connected(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket, 0.1)
      return is_ack(ack)
  end
  
  def rq_set_gripper_connected(gripper_id="1"):
      if(gripper_id == "1"):
          gripper_1_connected = True
      end
  
      if (gripper_id == "2"):
          gripper_2_connected = True
      end
  
      if (gripper_id == "3"):
          gripper_3_connected = True
      end
  
      if (gripper_id == "4"):
          gripper_4_connected = True
      end
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open("127.0.0.1",63352, gripper_socket)
  
      retryCtr = 1
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and retryCtr < 2000):
          retryCtr = retryCtr + 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      if(is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected):
          return True
      else:
          return False
      end
  end
  
  def rq_is_gripper_in_sid_list(gripper_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      if(sid1 == gripper_sid or sid2 == gripper_sid or sid3 == gripper_sid or sid4 == gripper_sid):
          return True
      else:
          return False
      end
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      sync()
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sync()
      sid_list = socket_read_byte_list(17, gripper_socket)
      sync()
      return sid_list
  end
  
  def rq_activate(gripper_socket="1"):
      rq_gripper_act = 0
  
      if (not rq_is_gripper_activated(gripper_socket)):
         rq_reset(gripper_socket)
  
         while(socket_get_var("ACT",gripper_socket) == 1):
            sleep(0.1)
            rq_reset(gripper_socket)
         end
      end
  
      rq_set_var(ACT,1, gripper_socket)
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      rq_activate(gripper_socket)
      sleep(1.0)
  
      while(not rq_is_gripper_activated(gripper_socket)):
          # wait for activation completed
      end
      sleep(0.5)
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_1_connected):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_2_connected):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_3_connected):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_4_connected):
          rq_reset_and_activate("4", reset)
      end
  
      sleep(0.2)
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          sleep(0.5)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_scan_block():
      gripper_socket = "scn_block_socket"
      socket_open("127.0.0.1", 63352, gripper_socket)
      socket_set_var("SCN_BLOCK", 1, gripper_socket)
      sync()
      ack_test = socket_read_byte_list(3, gripper_socket)
  
      retry_counter = 0
  
      while(not is_ack(ack_test) and retry_counter < 5):
          socket_set_var("SCN_BLOCK", 1, gripper_socket)
          sync()
          ack_test = socket_read_byte_list(3, gripper_socket)
          retry_counter = retry_counter + 1
      end
  
      socket_close("scn_block_socket")
  end
  
  def rq_reset(gripper_socket="1"):
      rq_gripper_act = 0
      rq_obj_detect = 0
      rq_mov_complete = 0
  
      rq_set_var(ACT,0, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var(ARD,0, gripper_socket)
      rq_set_var(ACT,1, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
      sleep(0.1)
      rq_set_var(ATR,1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var(ARD,1, gripper_socket)
      rq_set_var(ACT,1, gripper_socket)
      rq_set_var(ATR,0, gripper_socket)
      sleep(0.1)
      rq_set_var(ATR,1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      retryCounter = 1
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and retryCounter <= 20):
          retryCounter = retryCounter + 1
          gFLT = rq_get_var(FLT, 2, gripper_socket)
          sleep(0.1)
      end
  
      retryCounter = 1
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and retryCounter <= 100):
          retryCounter = retryCounter + 1
          gFLT = rq_get_var(FLT, 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var(FOR, force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var(SPE, speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_mov_complete = 0
      rq_obj_detect = 0
  
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var(PRE, 3, gripper_socket)
      pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  
      while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
          gPRE = rq_get_var(PRE, 3, gripper_socket)
          pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
          sync()
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
          rq_go_to(gripper_socket)
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  
      # following code used for compatibility with previous versions
      rq_is_object_detected(gripper_socket)
  
      if (rq_obj_detect != 1):
          rq_mov_complete = 1
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          # wait for motion completed
          sleep(0.01)
          sync()
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var(POS, pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  # set the position, speed and force
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      enter_critical
      rq_send_pos_spd_for(pos, speed, force, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          rq_send_pos_spd_for(pos, speed, force, gripper_socket)
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
      rq_set_var(MSC, current, gripper_socket)
      sleep(1.5)
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var(MOD, mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      socket_send_string("GET MSC",gripper_socket)
      sync()
      var_value = socket_read_byte_list(3, gripper_socket)
  
      current = rq_list_of_bytes_to_value(var_value)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  # send the position, speed and force
  def rq_send_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      rq_mov_complete = 0
  
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
      sleep(0.01)
  
      if (is_OBJ_gripper_at_position(gOBJ)):
          rq_mov_complete = 1
          return True
      end
  
      if (is_OBJ_object_detected(gOBJ)):
          rq_mov_complete = 1
          return True
      end
  
      return False
  
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var(STA, 1, gripper_socket)
  
      if(is_STA_gripper_activated(gSTA)):
          rq_gripper_act = 1
          return True
      else:
          rq_gripper_act = 0
          return False
      end
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  
      if(is_OBJ_object_detected(gOBJ)):
          rq_obj_detect = 1
          return True
      else:
          rq_obj_detect = 0
          return False
      end
  end
  
  def rq_current_pos(gripper_socket="1"):
      enter_critical
      rq_pos = socket_get_var("POS",gripper_socket)
      exit_critical
      sync()
      return rq_pos
  end
  
  def rq_motor_current(gripper_socket="1"):
      enter_critical
      rq_current = socket_get_var("COU",gripper_socket)
      exit_critical
      sync()
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_1_connected):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_2_connected):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_3_connected):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_4_connected):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var(FLT, 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      socket_send_string("GET NCY",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
  
      if(string_from_server == "0"):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", string_from_server)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      socket_send_string("GET DST",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
  
      if(string_from_server == "0"):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(string_from_server == "1"):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(string_from_server == "2"):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(string_from_server == "3"):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      socket_send_string("GET SNU",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      socket_send_string("GET FWV",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      socket_send_string("GET VER",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_gripper_probleme_connection(gripper_socket="1"):
      socket_send_string("GET PCO",gripper_socket)
      sync()
      string_from_server = socket_read_string(gripper_socket)
      sync()
      if (string_from_server == "0"):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '3'?
      if (list_of_bytes[1] == 51):
          return True
      end
  
      return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '2'?
      if (list_of_bytes[1] == 50):
          return True
      end
  
      # byte is '1'?
      if (list_of_bytes[1]  == 49):
          return True
      end
  
      return False
  
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
      # list length is not 1
      if (list_of_bytes[0] != 1):
          return False
      end
  
      # byte is '3'?
      if (list_of_bytes[1] == 51):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  
      if (is_OBJ_gripper_at_position(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var(GTO, 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var(GTO ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var(GTO, 1, gripper_socket))):
        sync()
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var(GTO, 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, list_of_bytes):
      zero_ascii = 48
      if (list_of_bytes[0] != 1):
          return False
      end
  
      if (list_of_bytes[1] == zero_ascii + goto_value):
          return True
      else:
          return False
      end
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '0'?
      if (list_of_bytes[2] != 48):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '5'?
      if (list_of_bytes[2] != 53):
          return False
      end
  
      return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '0'?
      if (list_of_bytes[1] != 48):
          return False
      end
  
      # second byte is '7'?
      if (list_of_bytes[2] != 55):
          return False
      end
  
      return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '1'?
      if (list_of_bytes[2] != 49):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '4'?
      if (list_of_bytes[2] != 52):
          return False
      end
  
      return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
      # list length is not 2
      if (list_of_bytes[0] != 2):
          return False
      end
  
      # first byte is '1'?
      if (list_of_bytes[1] != 49):
          return False
      end
  
      # second byte is '5'?
      if (list_of_bytes[2] != 53):
          return False
      end
  
      return True
  
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
  
      var_name_string = ""
  
      if (var_name == ACT):
          var_name_string = "ACT"
      elif (var_name == GTO):
          var_name_string = "GTO"
      elif (var_name == ATR):
          var_name_string = "ATR"
      elif (var_name == ARD):
          var_name_string = "ARD"
      elif (var_name == FOR):
          var_name_string = "FOR"
      elif (var_name == SPE):
          var_name_string = "SPE"
      elif (var_name == POS):
          var_name_string = "POS"
      elif (var_name == LBP):
          var_name_string = "LBP"
      elif (var_name == LRD):
          var_name_string = "LRD"
      elif (var_name == LBL):
          var_name_string = "LBL"
      elif (var_name == LGN):
          var_name_string = "LGN"
      elif (var_name == MSC):
          var_name_string = "MSC"
      elif (var_name == MOD):
          var_name_string = "MOD"
      end
  
      enter_critical
      socket_set_var(var_name_string, var_value, gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      exit_critical
  
      sync()
  
      while(is_not_ack(ack)):
          enter_critical
          socket_set_var(var_name_string , var_value, gripper_socket)
          sync()
          ack = socket_read_byte_list(3, gripper_socket)
          exit_critical
  
          sync()
      end
  end
  
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      enter_critical
  
      if (var_name == FLT):
          socket_send_string("GET FLT", gripper_socket)
      elif (var_name == OBJ):
          socket_send_string("GET OBJ", gripper_socket)
      elif (var_name == STA):
          socket_send_string("GET STA", gripper_socket)
      elif (var_name == PRE):
          socket_send_string("GET PRE", gripper_socket)
      elif (var_name == GTO):
          socket_send_string("GET GTO", gripper_socket)
      else:
      end
  
      var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  
      exit_critical
  
      sync()
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var(LBP,0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,0, gripper_socket)
      rq_set_var(LBL,0, gripper_socket)
      rq_set_var(LGN,1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var(LBP,1, gripper_socket)
      rq_set_var(LRD,1, gripper_socket)
      rq_set_var(LBL,1, gripper_socket)
      rq_set_var(LGN,0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
    byte_in_buffer = socket_read_byte_list(1, gripper_socket, read_timeout)
  
    while(byte_in_buffer[0] >= 1):
        byte_in_buffer = socket_read_byte_list(1, gripper_socket, read_timeout)
    end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_obj_detect = 0
  set_tool_voltage(24)
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  rq_wait_for_gripper_connected()
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  connectivity_checked = [-1,-1,-1,-1]
  status_checked = [-1,-1,-1,-1]
  current_speed = [-1,-1,-1,-1]
  current_force = [-1,-1,-1,-1]
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_set_gripper_max_cur(0, "1")
  # end: URCap Installation Node
  global inter_wp_2_p=p[-.038106806217, -.247898455991, .231571992004, 2.240979812439, 2.179834746429, .018963373588]
  global inter_wp_2_q=[-1.1881535688983362, -1.2589882177165528, -2.178041934967041, -1.2646196645549317, 1.594545841217041, -4.295405213032858]
  global rb_b1_wp_p=p[-.031427316986, -.284614402279, .218561556347, 2.245130750326, 2.188185927292, -.017070322245]
  global rb_b1_wp_q=[-1.2090323607074183, -1.4596575063518067, -2.093444347381592, -1.147953824406006, 1.569251537322998, -4.317883316670553]
  global rb_b1_at_p=p[-.031435970347, -.284602310239, .149414441644, 2.245212312216, 2.188231820627, -.016967189415]
  global rb_b1_at_q=[-1.2095955053912562, -1.659008642236227, -2.294908046722412, -0.7472637456706543, 1.5671401023864746, -4.316336456929342]
  global h_rb_b1_wp_p=p[-.266627743132, -.400606162429, .248259472953, -2.922149929792, .060823948746, -.049589957373]
  global h_rb_b1_wp_q=[-1.8763826529132288, -2.491099020043844, -0.38187551498413086, -2.057415624658102, 1.5458478927612305, -3.4042938391314905]
  global h_rb_b1_at_p=p[-.266630753061, -.397734990876, .185294638627, -2.922108461394, .060838083147, -.049797758545]
  global h_rb_b1_at_q=[-1.879228417073385, -2.4287249050536097, -0.7988162040710449, -1.7029200992979945, 1.5463519096374512, -3.4043901602374476]
  global rb_b2_wp_p=p[-.036380502628, -.358469023791, .213765360111, -2.263362897784, -2.174235597981, -.031466876574]
  global rb_b2_wp_q=[-1.308368984852926, -1.8021513424315394, -1.7397303581237793, -1.1815441411784668, 1.592073917388916, -4.403766457234518]
  global rb_b2_at_p=p[-.036368803058, -.358470473303, .152677661430, -2.263290076191, -2.174326081629, -.031476740308]
  global rb_b2_at_q=[-1.3087285200702112, -1.9345623455443324, -1.8903002738952637, -0.8985412877849122, 1.5908498764038086, -4.402688805256979]
  global h_rb_b2_wp_p=p[-.228341072822, -.407822682713, .243400366393, -2.948400878183, .091010695741, -.023405880539]
  global h_rb_b2_wp_q=[-1.7934005896197718, -2.344246049920553, -0.6889443397521973, -1.869317194024557, 1.554387092590332, -3.3006771246539515]
  global h_rb_b2_at_p=p[-.228325869107, -.396503240227, .188907960257, -2.948390027203, .090960920045, -.023342538727]
  global h_rb_b2_at_q=[-1.79973012605776, -2.2985006771483363, -1.0275492668151855, -1.5763761005797328, 1.5536437034606934, -3.3046281973468226]
  global home_p=p[-.122926064601, -.120377487418, .410038266727, 2.273030626148, 2.165691232475, -.026434895123]
  global home_q=[-1.4988182226764124, -0.9976299566081543, -1.4041590690612793, -2.297314306298727, 1.5646681785583496, -4.592502895985739]
  global ra_b1_wp_p=p[.280355035500, -.432174580907, .229591520830, 2.249814344602, 2.138257508694, .008630527813]
  global ra_b1_wp_q=[-0.7389901320086878, -2.520254751245016, -0.508852481842041, -1.6441294155516566, 1.5783591270446777, -3.829442803059713]
  global ra_b1_at_p=p[.280344611765, -.432185433290, .152651856525, 2.249777707687, 2.138262268302, .008684587947]
  global ra_b1_at_q=[-0.7397926489459437, -2.54766382793569, -0.8190608024597168, -1.3064792913249512, 1.5783348083496094, -3.827833954487936]
  global h_ra_b1_wp_p=p[-.259638186399, -.205368064332, .227372072892, 2.942868139884, -.031034414079, -.003347604563]
  global h_ra_b1_wp_q=[-2.0994413534747522, -1.6374765835204066, -1.9562897682189941, -0.9425981801799317, 1.670964241027832, -3.632834259663717]
  global h_ra_b1_at_p=p[-.259633440789, -.205355729161, .182009491870, 2.942947045087, -.030985505586, -.003322053796]
  global h_ra_b1_at_q=[-2.099705521260397, -1.7479249439635218, -2.0801596641540527, -0.7082880300334473, 1.66965913772583, -3.632089440022604]
  global ra_b2_wp_p=p[-.029938153265, -.218629417152, .225300144532, -2.243577886312, -2.193594307436, -.019787869484]
  global ra_b2_wp_q=[-1.08535081544985, -1.0908106130412598, -2.2932515144348145, -1.3343513768962403, 1.589277744293213, -4.198210541401998]
  global ra_b2_at_p=p[-.029954261388, -.218612934222, .148235225498, -2.243591362993, -2.193427555971, -.019847878924]
  global ra_b2_at_q=[-1.086417023335592, -1.325747327213623, -2.584930896759033, -0.8078230184367676, 1.5868301391601562, -4.195906464253561]
  global h_ra_b2_wp_p=p[-.218821598898, -.212790014736, .237473496817, .011941053468, 3.106631431205, -.282154569761]
  global h_ra_b2_wp_q=[-1.9615595976458948, -1.5049827855876465, -2.0295023918151855, -1.016305760746338, 1.6642241477966309, -6.651355393717083]
  global h_ra_b2_at_p=p[-.218835096999, -.212789547565, .184432151823, .012008698792, 3.106663019716, -.282167747721]
  global h_ra_b2_at_q=[-1.9619672934161585, -1.633982320825094, -2.1908211708068848, -0.7258823674968262, 1.6626553535461426, -6.65030253727177]
  global inter_wp_1_p=p[.122780089495, -.220582907223, .231494923759, 2.296791873106, 2.120458744169, -.020122840003]
  global inter_wp_1_q=[-0.5171569029437464, -1.258807973270752, -2.179008960723877, -1.2626317304423829, 1.5605406761169434, -3.572470490132467]
  global i_b1_wp_p=p[.174192241550, -.292235322559, .217965755190, 2.249722702830, 2.163895484586, -.006628091087]
  global i_b1_wp_q=[-0.6404917875873011, -1.701519628564352, -1.8551859855651855, -1.1354902547648926, 1.568483829498291, -3.736637894307272]
  global i_b1_at_p=p[.174178571885, -.292237819264, .152329867206, 2.249762428528, 2.163822902669, -.006603223878]
  global i_b1_at_q=[-0.6409476439105433, -1.8579889736571253, -2.022392749786377, -0.8118027013591309, 1.5669236183166504, -3.7353904883014124]
  global h_i_b1_wp_p=p[-.258783164736, -.313737961489, .212192537753, -3.075291167221, .054703236677, -.005601509478]
  global h_i_b1_wp_q=[-1.9310181776629847, -2.0029808483519496, -1.446007251739502, -1.325596646671631, 1.557253360748291, -3.4610660711871546]
  global h_i_b1_at_p=p[-.258783695093, -.313742139196, .169110994171, -3.075290341994, .054709803265, -.005664874528]
  global h_i_b1_at_q=[-1.9313300291644495, -2.071186681787008, -1.5590205192565918, -1.1444061559489747, 1.556786060333252, -3.4602745215045374]
  global i_b2_wp_p=p[.174828953990, -.360085683171, .217003709069, 2.264665267781, 2.146923086852, -.017797509461]
  global i_b2_wp_q=[-0.7857697645770472, -1.9495846233763636, -1.535611629486084, -1.2054875654033204, 1.5636839866638184, -3.8686845938311976]
  global i_b2_at_p=p[.174838867751, -.360085187689, .149760048030, 2.264595442069, 2.146989715034, -.017857101245]
  global i_b2_at_q=[-0.7861407438861292, -2.078013082543844, -1.6933417320251465, -0.9193409246257325, 1.5625324249267578, -3.8675926367389124]
  global h_i_b2_wp_p=p[-.217208512770, -.305751766119, .209412990257, -3.114746093179, .076205754657, .024423667929]
  global h_i_b2_wp_q=[-1.8299101034747522, -1.8663393459715785, -1.6728529930114746, -1.1936806005290528, 1.5545907020568848, -3.3457096258746546]
  global h_i_b2_at_p=p[-.217211788719, -.305746963974, .163982897342, -3.114739668466, .076249451987, .024424334151]
  global h_i_b2_at_q=[-1.8302210013019007, -1.9561602077879847, -1.7866787910461426, -0.9900577825358887, 1.5537872314453125, -3.34485894838442]
  global i_b3_wp_p=p[.173862258924, -.434438603195, .228912422351, -2.298418704454, -2.134193882427, .007682427382]
  global i_b3_wp_q=[-0.9068062941180628, -2.246336599389547, -0.995913028717041, -1.4737170499614258, 1.5703434944152832, -3.971748177205221]
  global i_b3_at_p=p[.173823156459, -.434448031063, .155772110651, -2.298484628649, -2.134095850323, .007654579063]
  global i_b3_at_q=[-0.9074423948871058, -2.3276401958861292, -1.2064604759216309, -1.1818912786296387, 1.5699000358581543, -3.970438782368795]
  global h_i_b3_wp_p=p[-.245926431325, -.287975947175, .221138424943, 2.265091070179, 2.142257721375, .050250326743]
  global h_i_b3_wp_q=[-1.937037769948141, -1.8707848987975062, -1.6093335151672363, -1.2498768132976075, 1.6110801696777344, -5.0177486578570765]
  global b_i_b3_at_p=p[-.245919679132, -.287990144610, .185908898498, 2.265011775372, 2.142282230816, .050189643839]
  global b_i_b3_at_q=[-1.937277619038717, -1.929150243798727, -1.7081046104431152, -1.0926636022380372, 1.6105880737304688, -5.017090622578756]
  global i_b4_wp_p=p[.086376316464, -.218927672075, .224266461302, 2.242717414600, 2.174485689430, .006203470683]
  global i_b4_wp_q=[-0.6128180662738245, -1.1726110738566895, -2.268115520477295, -1.2523315709880372, 1.5783467292785645, -3.7167509237872522]
  global i_b4_at_p=p[.086373927098, -.218929038232, .151178920378, 2.242715259985, 2.174487097633, .006122886802]
  global i_b4_at_q=[-0.6136463324176233, -1.4001072210124512, -2.5298876762390137, -0.7630737584880372, 1.5758271217346191, -3.7147110144244593]
  global h_i_b4_wp_p=p[-.249298910008, -.327199340682, .221840503144, 2.237414807683, 2.200561019261, .043323968767]
  global h_i_b4_wp_q=[-1.904154125844137, -2.00401033977651, -1.4131464958190918, -1.3174303335002442, 1.5908379554748535, -5.024725739155905]
  global h_i_b4_at_p=p[-.249283012400, -.327215710597, .183231959106, 2.237370497069, 2.200600303557, .043338053265]
  global h_i_b4_at_q=[-1.9043944517718714, -2.0592829189696253, -1.52122163772583, -1.1540773671916504, 1.5904178619384766, -5.023996178303854]
  global bb_b1_wp_p=p[.292657851106, -.296108749272, .211213437660, 2.219860381907, 2.211324753995, -.054734056088]
  global bb_b1_wp_q=[-0.46579057375063115, -2.026353498498434, -1.4396796226501465, -1.2490747731975098, 1.5400433540344238, -3.598545853291647]
  global bb_b1_at_p=p[.292645183539, -.296127490152, .151887217158, 2.219934532475, 2.211221669671, -.054796912819]
  global bb_b1_at_q=[-0.4661982695208948, -2.1310459576048792, -1.579251766204834, -1.0048411649516602, 1.539167881011963, -3.5975120703326624]
  global h_bb_b1_wp_p=p[-.263499454966, -.370068129897, .200329313152, -3.082794167122, .052438819924, -.026070943868]
  global h_bb_b1_wp_q=[-1.898595158253805, -2.22365727047109, -1.148998737335205, -1.3992536824992676, 1.573967456817627, -3.4319656530963343]
  global h_bb_b1_at_p=p[-.263484310764, -.370083176384, .150731772410, -3.082801167736, .052316655689, -.026033363493]
  global h_bb_b1_at_q=[-1.8988717238055628, -2.2930733166136683, -1.2722840309143066, -1.2065413755229493, 1.573559284210205, -3.4311378637896937]
  global bb_b2_wp_p=p[.285028538198, -.360313139231, .221675732213, 2.240205631819, 2.148819131385, -.028151548406]
  global bb_b2_wp_q=[-0.6090839544879358, -2.193617960015768, -1.13539457321167, -1.3493412298015137, 1.5504889488220215, -3.7058942953692835]
  global bb_b2_at_p=p[.285033489270, -.360321540172, .151607686842, 2.240129358528, 2.148755806669, -.028039959142]
  global bb_b2_at_q=[-0.6095641295062464, -2.2904612026610316, -1.3134608268737793, -1.0743482869914551, 1.549877643585205, -3.7047413031207483]
  global h_bb_b2_wp_p=p[-.226231108515, -.370058242701, .202803867605, -3.101028079354, .051424681647, -.011939969332]
  global h_bb_b2_wp_q=[-1.8147967497455042, -2.1240421734251917, -1.3112683296203613, -1.3167947095683594, 1.5741353034973145, -3.348156754170553]
  global h_bb_b2_at_p=p[-.226245985849, -.370052644314, .150663386101, -3.101019396815, .051424852228, -.011918167929]
  global h_bb_b2_at_q=[-1.815155331288473, -2.2079249821104945, -1.4344658851623535, -1.1097210210612793, 1.57354736328125, -3.347304169331686]
  global bb_b3_wp_p=p[.176160168284, -.231768895443, .209636666206, -2.243072062159, -2.187401030925, -.034861030693]
  global bb_b3_wp_q=[-0.46848756471742803, -1.5087879461101075, -2.091085910797119, -1.1119135183146973, 1.6001973152160645, -3.5776613394366663]
  global bb_b3_at_p=p[.176162519638, -.231778748434, .151996709969, -2.243170732311, -2.187368443884, -.034857989998]
  global bb_b3_at_q=[-0.468942944203512, -1.6748939953246058, -2.253322124481201, -0.7835005086711426, 1.598421573638916, -3.5763519446002405]
  global h_bb_b3_wp_p=p[-.252791424979, -.407786214137, .213756455668, 2.240432662873, 2.181179891819, .053786849738]
  global h_bb_b3_wp_q=[-1.8562873045550745, -2.327867170373434, -0.9173092842102051, -1.4889906209758301, 1.6049609184265137, -4.969145599995748]
  global h_bb_b3_at_p=p[-.252772320931, -.407792805373, .169414731033, 2.240386299547, 2.181225618150, .053743398446]
  global h_bb_b3_at_q=[-1.856598202382223, -2.3691050014891566, -1.0545783042907715, -1.3104322713664551, 1.6047682762145996, -4.968307320271627]
  global ba_b1_wp_p=p[.291339365288, -.160762594350, .202266809646, 2.219550209906, 2.163353276594, -.045979940713]
  global ba_b1_wp_q=[-0.08961183229555303, -1.6945487461485804, -1.9425930976867676, -1.0620339673808594, 1.5260348320007324, -3.198744599019186]
  global ba_b1_at_p=p[.291326667515, -.160782085519, .153553900892, 2.219603122013, 2.163288378836, -.046013053633]
  global ba_b1_at_q=[-0.08997136751283819, -1.8214546642699183, -2.063002109527588, -0.8147753042033692, 1.5247278213500977, -3.1978309790240687]
  global h_ba_b1_wp_p=p[-.257857797822, -.237790151934, .193998182357, -3.128706385902, .047281550282, -.005932804141]
  global h_ba_b1_wp_q=[-2.0179131666766565, -1.797089239160055, -1.8488364219665527, -1.0783251088908692, 1.5738472938537598, -3.5516327063189905]
  global h_ba_b1_at_p=p[-.257855888568, -.237787062601, .153878468995, -3.128679496891, .047314226138, -.005980774856]
  global h_ba_b1_at_q=[-2.0181530157672327, -1.8945385418333949, -1.9424853324890137, -0.8872669500163575, 1.5729355812072754, -3.550886933003561]
  global ba_b2_wp_p=p[.297099483357, -.229137496399, .201508626794, 2.253386536838, 2.185430615493, -.042633881314]
  global ba_b2_wp_q=[-0.29768687883485967, -1.8774291477599085, -1.7026314735412598, -1.1425245565227051, 1.5508008003234863, -3.4023731390582483]
  global ba_b2_at_p=p[.297092594188, -.229143046915, .153245979858, 2.253420631892, 2.185418869381, -.042686862617]
  global ba_b2_at_q=[-0.29798728624452764, -1.981547018090719, -1.814502239227295, -0.9265898031047364, 1.5498414039611816, -3.401522461568014]
  global h_ba_b2_wp_p=p[-.220819946342, -.246483456869, .208906736140, -3.127218714819, .066911953420, .001962092834]
  global h_ba_b2_wp_q=[-1.8976228872882288, -1.6851583919920863, -1.906811237335205, -1.131991223697998, 1.5707635879516602, -3.418845001851217]
  global h_ba_b2_at_p=p[-.220811760971, -.246497191328, .153058010467, -3.127266966559, .066892327189, .002019883719]
  global h_ba_b2_at_q=[-1.8979466597186487, -1.8233214817442835, -2.0495972633361816, -0.850994424229004, 1.5693717002868652, -3.417715851460592]
  global ba_b3_wp_p=p[.176479408738, -.156192498361, .208942119029, 2.198737032798, 2.172626761670, -.015850557492]
  global ba_b3_wp_q=[-0.12473708788026983, -1.185565785770752, -2.3442654609680176, -1.1483848851970215, 1.5381722450256348, -3.247589890156881]
  global ba_b3_at_p=p[.176475137159, -.156198380325, .150955283924, 2.198707357803, 2.172602952154, -.015926283312]
  global ba_b3_at_q=[-0.12538272539247686, -1.3908446592143555, -2.5470919609069824, -0.7403486532023926, 1.5358452796936035, -3.2459667364703577]
  global h_ba_b3_wp_p=p[-.240197051904, -.213510225202, .217854628561, 2.242036269078, 2.195185785435, .036165846914]
  global h_ba_b3_wp_q=[-2.0037358442889612, -1.6322170696654261, -1.9163737297058105, -1.1828740400126954, 1.5879220962524414, -5.117778603230612]
  global h_ba_b3_at_p=p[-.240198557857, -.213502138248, .166817001258, 2.242033882419, 2.195277478888, .036102085564]
  global h_ba_b3_at_q=[-2.0041192213641565, -1.7485815487303675, -2.060316562652588, -0.9225400251201172, 1.586686134338379, -5.116738621388571]
  def roof_b():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(inter_wp_2_p, qnear=inter_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(rb_b1_wp_p, qnear=rb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(rb_b1_at_p, qnear=rb_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(rb_b1_wp_p, qnear=rb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_rb_b1_wp_p, qnear=h_rb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_rb_b1_at_p, qnear=h_rb_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_rb_b1_wp_p, qnear=h_rb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(rb_b2_wp_p, qnear=rb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(rb_b2_at_p, qnear=rb_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(rb_b2_wp_p, qnear=rb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_rb_b2_wp_p, qnear=h_rb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_rb_b2_at_p, qnear=h_rb_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_rb_b2_wp_p, qnear=h_rb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(home_p, qnear=home_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def roof_a():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(inter_wp_2_p, qnear=inter_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b1_wp_p, qnear=ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b1_at_p, qnear=ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b1_wp_p, qnear=ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b1_at_p, qnear=h_ra_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b1_wp_p, qnear=h_ra_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b2_wp_p, qnear=ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ra_b2_at_p, qnear=ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ra_b2_wp_p, qnear=ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ra_b2_at_p, qnear=h_ra_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ra_b2_wp_p, qnear=h_ra_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(inter_wp_2_p, qnear=inter_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def interconnect():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(inter_wp_1_p, qnear=inter_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b1_wp_p, qnear=i_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b1_at_p, qnear=i_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(i_b1_wp_p, qnear=i_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b1_wp_p, qnear=h_i_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b1_at_p, qnear=h_i_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_i_b1_wp_p, qnear=h_i_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b2_wp_p, qnear=i_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b2_at_p, qnear=i_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(i_b2_wp_p, qnear=i_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b2_wp_p, qnear=h_i_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b2_at_p, qnear=h_i_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_i_b2_wp_p, qnear=h_i_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b3_wp_p, qnear=i_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b3_at_p, qnear=i_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(i_b3_wp_p, qnear=i_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b3_wp_p, qnear=h_i_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(b_i_b3_at_p, qnear=b_i_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_i_b3_wp_p, qnear=h_i_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b4_wp_p, qnear=i_b4_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(i_b4_at_p, qnear=i_b4_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(i_b4_wp_p, qnear=i_b4_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b4_wp_p, qnear=h_i_b4_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_i_b4_at_p, qnear=h_i_b4_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_i_b4_wp_p, qnear=h_i_b4_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(inter_wp_2_p, qnear=inter_wp_2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def base_b():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(inter_wp_1_p, qnear=inter_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b1_wp_p, qnear=bb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b1_at_p, qnear=bb_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(bb_b1_wp_p, qnear=bb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b1_wp_p, qnear=h_bb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b1_at_p, qnear=h_bb_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_bb_b1_wp_p, qnear=h_bb_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b2_wp_p, qnear=bb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b2_at_p, qnear=bb_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(bb_b2_wp_p, qnear=bb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b2_wp_p, qnear=h_bb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b2_at_p, qnear=h_bb_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_bb_b2_wp_p, qnear=h_bb_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b3_wp_p, qnear=bb_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(bb_b3_at_p, qnear=bb_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(bb_b3_wp_p, qnear=bb_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b3_wp_p, qnear=h_bb_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_bb_b3_at_p, qnear=h_bb_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_bb_b3_wp_p, qnear=h_bb_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(inter_wp_1_p, qnear=inter_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def base_a():
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper Activate
    
    rq_init_comm_if_connected(9, "1")
    rq_init_comm_if_connected(2, "2")
    rq_init_comm_if_connected(3, "3")
    rq_init_comm_if_connected(4, "4")
    
    reset_and_activate = False
    
    rq_activate_all_grippers(False)
    
    clear_socket_buffer("1")
    clear_socket_buffer("2")
    clear_socket_buffer("3")
    clear_socket_buffer("4")
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(home_p, qnear=home_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b1_wp_p, qnear=ba_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b1_at_p, qnear=ba_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ba_b1_wp_p, qnear=ba_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b1_wp_p, qnear=h_ba_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b1_at_p, qnear=h_ba_b1_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ba_b1_wp_p, qnear=h_ba_b1_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b2_wp_p, qnear=ba_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b2_at_p, qnear=ba_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ba_b2_wp_p, qnear=ba_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b2_wp_p, qnear=h_ba_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b2_at_p, qnear=h_ba_b2_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ba_b2_wp_p, qnear=h_ba_b2_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b3_wp_p, qnear=ba_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(ba_b3_at_p, qnear=ba_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(255, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(ba_b3_wp_p, qnear=ba_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b3_wp_p, qnear=h_ba_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(h_ba_b3_at_p, qnear=h_ba_b3_at_q), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: Robotiq_Grippers, 1.6.0.4, Robotiq Inc.
    #   Type: Gripper
    gripper_1_used = True
    if (connectivity_checked[0] != 1):
      if not(rq_set_sid(9, "1")):
        popup("Gripper 1 must be connected to run this program.", "No connection", False, True, True)
      end
      connectivity_checked[0] = 1
    end
    if (status_checked[0] != 1):
      if not(rq_is_gripper_activated("1")):
        popup("Gripper 1 is not activated. Go to Installation tab > Gripper to activate it and run the program again.", "Not activated", False, True, True)
      end
      status_checked[0] = 1
    end
    rq_set_pos_spd_for(128, 255, 255, "1")
    rq_go_to("1")
    rq_wait("1")
    gripper_1_selected = True
    gripper_2_selected = False
    gripper_3_selected = False
    gripper_4_selected = False
    gripper_1_used = False
    gripper_2_used = False
    gripper_3_used = False
    gripper_4_used = False
    # end: URCap Program Node
    movej(get_inverse_kin(h_ba_b3_wp_p, qnear=h_ba_b3_wp_q), a=1.3962634015954636, v=1.0471975511965976)
    movej(get_inverse_kin(inter_wp_1_p, qnear=inter_wp_1_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 1 "Robot Program"
  $ 2 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
  $ 3 "Call base_a"
  base_a()
  $ 4 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
  $ 5 "Call base_b"
  base_b()
  $ 6 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
  $ 7 "Call interconnect"
  interconnect()
  $ 8 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
  $ 9 "Call roof_a"
  roof_a()
  $ 10 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
  $ 11 "Call roof_b"
  roof_b()
  $ 12 "Popup"
  popup("interaction event", "Message", False, False, blocking=True)
end
